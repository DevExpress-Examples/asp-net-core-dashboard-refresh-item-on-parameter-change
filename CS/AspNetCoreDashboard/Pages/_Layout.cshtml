<!DOCTYPE html>

<html>
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
	<title>Dashboard Web Application</title>

	<link href="css/site.min.css" rel="stylesheet" />

	<script type="text/javascript">
		function onBeforeRender(dashboardControl) {
			dashboardControl.registerExtension(new DevExpress.Dashboard.DashboardPanelExtension(dashboardControl, { dashboardThumbnail: "./DashboardThumbnail/{0}.png" }));

			var viewerApi = dashboardControl.findExtension('viewerApi');
			if (viewerApi) {
				viewerApi.on('itemMasterFilterStateChanged', e => onItemMasterFilterStateChanged(dashboardControl, e));
			}
		}

		function onItemMasterFilterStateChanged(dashboardControl, e) {
			if (e.itemName === 'gridDashboardItem1') {
				var viewerApi = dashboardControl.findExtension('viewerApi');
				var filterValues = viewerApi.getCurrentFilterValues(e.itemName);
				if (filterValues) {
					var itemData = viewerApi.getItemData(e.itemName);
					var axisPoint = filterValues[0].getAxisPoint();
					var slice = itemData.getSlice(axisPoint);
					var productIdMeasure = slice.getMeasures().filter( m => m.dataMember === 'ProductID')[0];
					var productId = slice.getMeasureValue(productIdMeasure.id).getValue();

					// Send a ProductId value to the server using Request Headers
					dashboardControl.remoteService.headers = { 'ProductId' : productId};
					// Refresh the Chart Dashboard Item
					dashboardControl.refresh(['chartDashboardItem1']);
				}
			}
		}
	</script>
</head>
<body>
	@RenderBody()

	<script src="js/site.min.js"></script>
</body>
</html>